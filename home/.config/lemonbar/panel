#!/bin/bash

. panel_config

if xdo id -a "panel" > /dev/null ; then
    printf "%s\n" "The panel is already running." >&2
    exit 1
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

# display function used by both info.sh and panel_bar scripts:
blockActive=false;
declare -f block
if [ $? = "1" ]; then
    function block() {
        [ ! -z $NoPadding ] && pPadding=$NoPadding
        if [ "$blockActive" = true ] ; then
            echo -n "%{F$COLOR_FOCUSED_OCCUPIED_FG}%{U$COLOR_FOREGROUND}%{+u} $@ %{-u}%{F-}"
            # echo -n "%{F$COLOR_FOCUSED_OCCUPIED_FG}%{B$COLOR_FOCUSED_OCCUPIED_BG}%{U$COLOR_FOREGROUND}%{+u} $@ %{-u}%{B-}%{F-}"
        else
            echo -n "%{F$COLOR_FREE_FG}%{B$COLOR_FREE_BG} $@ %{B-}%{F-}"
        fi
    }
    export -f block
fi

num_mon=$(bspc query -M)

for i in $num_mon; do
    # remove any open panel fifo, and then create one
    [ -e "$PANEL_FIFO$i" ] && rm "$PANEL_FIFO$i"
    mkfifo "$PANEL_FIFO$i"

    # This greps out the bspc control section of the current monitor we are on.
    # The while loop in the middle appends 'W' to the start because the panel_bar
    # script assumes input from a 'regular' bspc control --subscribe command
    bspc subscribe report |\
        grep -oE "[Mm]$i[^TM]*[TML]" --line-buffered |\
        while read line; do echo W$line; done \
            > "$PANEL_FIFO$i" &

    # info.sh outputs system information.
    if [ -z "$(eval echo \$'barInfo'$i)" ]; then
        info.sh $barInfo > "$PANEL_FIFO$i" &
    else
        #Custom bar options per monitor. (defined barInfo$i var for this monitor)
        info.sh $(eval echo \$'barInfo'$i) > "$PANEL_FIFO$i" &
    fi

    # title.sh $i > "$PANEL_FIFO$i" &

    # Grep for current monitor width (will be first number regex match from bspc query command below).
    CUR_MON_WIDTH=$(bspc query -T -m $i | grep -Po "(?<=\"width\":)[0-9]*" | head -1)


    # cat "$PANEL_FIFO" | panel_bar | lemonbar -g 1600x$PANEL_HEIGHT -f "$PANEL_FONT_FAMILY" -f "$ICON_FONT" -f "$ICON_FONT2" -F "$COLOR_FOREGROUND" -B "$COLOR_BACKGROUND" -u 2 | bash &

    # The nested expr statements account for gap settings and current offset.
    # PANEL_GAP value is set in profile.
    cat "$PANEL_FIFO$i" | panel_bar |\
        lemonbar -n "panel" -g $(expr $CUR_MON_WIDTH - $(expr $PANEL_GAP + $PANEL_GAP))x$PANEL_HEIGHT+$(expr $CUR_X_OFFSET + $PANEL_GAP)+$PANEL_GAP -f "$PANEL_FONT_FAMILY" -f "$ICON_FONT" -f "$ICON_FONT2" -F "$COLOR_FOCUSED_OCCUPIED_FG" -B "$COLOR_BACKGROUND" -u 2 | sh &

    wid=$(xdo id -a "panel")
    tries_left=20
    while [ -z "$wid" -a "$tries_left" -gt 0 ] ; do
        sleep 0.05
        wid=$(xdo id -a "panel")
        tries_left=$((tries_left - 1))
    done
    [ -n "$wid" ] && xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"

    # Increment the x offset for the next monitor.
    CUR_X_OFFSET=$(expr $CUR_X_OFFSET + $CUR_MON_WIDTH )

done

wait
